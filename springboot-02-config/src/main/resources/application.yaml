# properties
# k=v

# 对空格的要求十分高

# 可以注入到我们的配置类中

# 普通的 key value
#name: kobe
#
## 对象
#student:
#  name: kobe
#  age: 3
#
#
## 行内写法
#student2: {name: kobe, age: 3}
#
#
## 数组
#pets:
#  - cat
#  - dog
#  - pig
#
#pets2: [cat,dog,pig]


person:
  name: kobe${random.uuid}
  age: ${random.int}
  happy: false
  birth: 2020/1/28
  maps: {k1: v1,k2: v2}
  hello: 常威
  email: kobe bryant@163.com
  lists:
    - basketball
    - coach
    - music
  dog:
    name: ${person.hello:hello}_旺财
    age: 3



dog:
  first-name: 阿黄
  name: 旺财
  age: 3



# springBoot 的多环境配置，可以选择激活哪一个配置文件
#spring:
#  profiles:
#    active: dev


#spring:
#  profiles:
#    active: test


server:
  port: 8080
spring:
  profiles:
    active: dev

---
server:
  port: 8081


spring:
  profiles: test
---
server:
  port: 8082

spring:
  profiles: dev



# 注解讲解
# @Configuration 表示这是一个配置类
# @EnableConfigurationProperties(HttpProperties) 自动配置属性  HttpProperties


# Spring的底层注解：根据不同的条件，米判断当前置域者类是否生效！
# @ConditionalOnWebApplication(type ConditionalOnWebApplication.Type.SERVLET)  类型不是一个web应用，直接失效
# @ConditionalOnClass(CharacterEncodingFilter.class)  是否存在CharacterEncodingFilter
# @ConditionalOnProperty(prefix "spring.http.encoding",value = "enabled", matchIfMissing = true)  是否不存在 spring.http.encoding的配置


# 在我们这配置文件中能配置的东西，都存在一个固有的规律     xxxAutoConfiguration：有默认值   xxxProperties  和配置文件绑定，就可以使用自定义的配置

# 可以通过 debug=true 来查看，哪些自动配置类生效，哪些没有生效
# debug: true
